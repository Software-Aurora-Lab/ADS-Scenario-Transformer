syntax = "proto2";
package openscenairo;

import "openscenario_msgs/entity.proto";
import "openscenario_msgs/by_type.proto";
import "openscenario_msgs/rule.proto";

// Enum for CoordinateSystem
enum CoordinateSystem {
    COORDINATESYSTEM_ENTITY = 0;
    COORDINATESYSTEM_LANE = 1;
    COORDINATESYSTEM_ROAD = 2;
    COORDINATESYSTEM_TRAJECTORY = 3;
}
// Enum for RelativeDistanceType
enum RelativeDistanceType {
    RELATIVEDISTANCETYPE_LATERAL = 0;
    RELATIVEDISTANCETYPE_LONGITUDINAL = 1;
    RELATIVEDISTANCETYPE_CARTESIAN_DISTANCE = 2;
    RELATIVEDISTANCETYPE_EUCLIDIAN_DISTANCE = 3;
}

// Enum for RoutingAlgorithm
enum RoutingAlgorithm {
    ROUTINGALGORITHM_ASSIGNED_ROUTE = 0;
    ROUTINGALGORITHM_FASTEST = 1;
    ROUTINGALGORITHM_LEAST_INTERSECTIONS = 2;
    ROUTINGALGORITHM_SHORTEST = 3;
    ROUTINGALGORITHM_UNDEFINED = 4;
}

// Enum for DirectionalDimension
enum DirectionalDimension {
    DIRECTIONALDIMENSION_LONGITUDINAL = 0;
    DIRECTIONALDIMENSION_LATERAL = 1;
    DIRECTIONALDIMENSION_VERTICAL = 2;
}

// Message for EntityCondition
message EntityCondition {
    optional EndOfRoadCondition endOfRoadCondition = 1;  // 0..1
    optional CollisionCondition collisionCondition = 2;  // 0..1
    optional OffroadCondition offroadCondition = 3;  // 0..1
    optional TimeHeadwayCondition timeHeadwayCondition = 4;  // 0..1
    optional TimeToCollisionCondition timeToCollisionCondition = 5;  // 0..1
    optional AccelerationCondition accelerationCondition = 6;  // 0..1
    optional StandStillCondition standStillCondition = 7;  // 0..1
    optional SpeedCondition speedCondition = 8;  // 0..1
    optional RelativeSpeedCondition relativeSpeedCondition = 9;  // 0..1
    optional TraveledDistanceCondition traveledDistanceCondition = 10;  // 0..1
    optional DistanceCondition distanceCondition = 11;  // 0..1
    optional RelativeDistanceCondition relativeDistanceCondition = 12;  // 0..1
    optional RelativeClearanceCondition relativeClearanceCondition = 13;  // 0..1
}

// Message for CollisionCondition
message CollisionCondition {
    required EntityRef entityRef = 1;    // 0..1
    required ByObjectType byType = 2;    // 0..1
}

// Message for TimeHeadwayCondition
message TimeHeadwayCondition {
    optional CoordinateSystem coordinateSystem = 1;  // 0..1
    required EntityRef entityRef = 2;  // 1..1
    required bool freespace = 3;      // 1..1
    optional RelativeDistanceType relativeDistanceType = 4;  // 0..1
    required RoutingAlgorithm routingAlgorithm = 5;  // 0..1
    required Rule rule = 6;          // 1..1
    required double value = 7;       // 1..1
}

// Message for TimeToCollisionCondition (Unsupported)
message TimeToCollisionCondition {}

// Message for AccelerationCondition
message AccelerationCondition {
    optional DirectionalDimension direction = 1; // 0..1
    required Rule rule = 2;                       // 1..1
    required double value = 3;                    // 1..1
}

// Message for SpeedCondition
message SpeedCondition {
    optional DirectionalDimension direction = 1;  // 0..1
    required EntityCondition condition = 2;  // 1..1
    required Rule rule = 3;      // 1..1
    required double value = 4;   // 1..1
}

// Message for StandStillCondition
message StandStillCondition {
    required double duration = 1;  // 1..1
    required EntityCondition condition = 2;  // 1..1
}

// Message for RelativeClearanceCondition
message RelativeClearanceCondition {
    optional double distanceBackward = 1;  // 0..1
    optional double distanceForward = 2;  // 0..1
    required bool freeSpace = 3;  // 1..1
    required bool oppositeLanes = 4;  // 1..1
    repeated RelativeLaneRange relativeLaneRange = 5;  // 0..*
    repeated EntityRef entityRef = 6;  // 0..*
}

// Message for RelativeLaneRange
message RelativeLaneRange {
    optional int32 from = 1;  // 0..1
    optional int32 to = 2;  // 0..1
}

// Message for DistanceCondition
message DistanceCondition {
    required CoordinateSystem coordinateSystem = 1;  // 0..1
    required bool freespace = 2;         // 1..1
    required RelativeDistanceType relativeDistanceType = 3;  // 0..1
    required RoutingAlgorithm routingAlgorithm = 4;  // 0..1
    required Rule rule = 5;             // 1..1
    required double value = 6;          // 1..1
}

// Message for EndOfRoadCondition (Unsupported)
message EndOfRoadCondition {}
    
// Message for OffroadCondition (Unsupported)
message OffroadCondition {}

// Message for RelativeSpeedCondition (Unsupported)
message RelativeSpeedCondition {}

// Message for TraveledDistanceCondition (Unsupported)
message TraveledDistanceCondition {}

// Message for RelativeDistanceCondition (Unsupported)
message RelativeDistanceCondition {}
