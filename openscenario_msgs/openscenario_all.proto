syntax = "proto2";

package openscenairo;

// Enum for CoordinateSystem
enum CoordinateSystem {
COORDINATESYSTEM_ENTITY = 0;
COORDINATESYSTEM_LANE = 1;
COORDINATESYSTEM_ROAD = 2;
COORDINATESYSTEM_TRAJECTORY = 3;
}

// Enum for DirectionalDimension
enum DirectionalDimension {
DIRECTIONALDIMENSION_LONGITUDINAL = 0;
DIRECTIONALDIMENSION_LATERAL = 1;
DIRECTIONALDIMENSION_VERTICAL = 2;
}

// Enum for DynamicsDimension
enum DynamicsDimension {
DYNAMICSDIMENSION_DISTANCE = 0;
DYNAMICSDIMENSION_RATE = 1;
DYNAMICSDIMENSION_TIME = 2;
}

// Enum for DynamicsShape
enum DynamicsShape {
DYNAMICSSHAPE_CUBIC = 0;
DYNAMICSSHAPE_LINEAR = 1;
DYNAMICSSHAPE_SINUSOIDAL = 2;
DYNAMICSSHAPE_STEP = 3;
}

// Enum for FollowingMode
enum FollowingMode {
FOLLOWINGMODE_FOLLOW = 0;
FOLLOWINGMODE_POSITION = 1;
}

// Enum for ObjectType
enum ObjectType {
OBJECTTYPE_MISCELLANEOUS = 0;
OBJECTTYPE_PEDESTRIAN = 1;
OBJECTTYPE_VEHICLE = 2;
OBJECTTYPE_EXTERNAL = 3;
}

// Enum for ReferenceContext
enum ReferenceContext {
REFERENCECONTEXT_ABSOLUTE = 0;
REFERENCECONTEXT_RELATIVE = 1;
}

// Enum for RelativeDistanceType
enum RelativeDistanceType {
RELATIVEDISTANCETYPE_LATERAL = 0;
RELATIVEDISTANCETYPE_LONGITUDINAL = 1;
RELATIVEDISTANCETYPE_CARTESIAN_DISTANCE = 2;
RELATIVEDISTANCETYPE_EUCLIDIAN_DISTANCE = 3;
}

// Enum for RoutingAlgorithm
enum RoutingAlgorithm {
ROUTINGALGORITHM_ASSIGNED_ROUTE = 0;
ROUTINGALGORITHM_FASTEST = 1;
ROUTINGALGORITHM_LEAST_INTERSECTIONS = 2;
ROUTINGALGORITHM_SHORTEST = 3;
ROUTINGALGORITHM_UNDEFINED = 4;
}

// Enum for SpeedTargetValueType
enum SpeedTargetValueType {
SPEEDTARGETVALUETYPE_DELTA = 0;
SPEEDTARGETVALUETYPE_FACTOR = 1;
}

// Enum for StoryboardElementState
enum StoryboardElementState {
STORYBOARDELEMENTSTATE_COMPLETE_STATE = 0;
STORYBOARDELEMENTSTATE_END_TRANSITION = 1;
STORYBOARDELEMENTSTATE_RUNNING_STATE = 2;
STORYBOARDELEMENTSTATE_SKIP_TRANSITION = 3;
STORYBOARDELEMENTSTATE_STANDBY_STATE = 4;
STORYBOARDELEMENTSTATE_START_TRANSITION = 5;
STORYBOARDELEMENTSTATE_STOP_TRANSITION = 6;
}

// Enum for StoryboardElementType
enum StoryboardElementType {
STORYBOARDELEMENTTYPE_ACT = 0;
STORYBOARDELEMENTTYPE_ACTION = 1;
STORYBOARDELEMENTTYPE_EVENT = 2;
STORYBOARDELEMENTTYPE_MANEUVER = 3;
STORYBOARDELEMENTTYPE_MANEUVER_GROUP = 4;
STORYBOARDELEMENTTYPE_STORY = 5;
}

// Enum for TriggeringEntitiesRule
enum TriggeringEntitiesRule {
TRIGGERINGENTITIESRULE_ALL = 0;
TRIGGERINGENTITIESRULE_ANY = 1;
}


// Enum for Priority
enum Priority {
    PRIORITY_OVERWRITE = 0;
    PRIORITY_OVERRIDE = 1;
    PRIORITY_PARALLEL = 2;
    PRIORITY_SKIP = 3;
}

// Enum for ConditionEdge
enum ConditionEdge {
    CONDITIONEDGE_FALLING = 0;
    CONDITIONEDGE_NONE = 1;
    CONDITIONEDGE_RISING = 2;
    CONDITIONEDGE_RISING_OR_FALLING = 3;
}

// Enum for MiscObjectCategory
enum MiscObjectCategory {
    MISC_OBJECT_CATEGORY_BARRIER = 0;
    MISC_OBJECT_CATEGORY_BUILDING = 1;
    MISC_OBJECT_CATEGORY_CROSSWALK = 2;
    MISC_OBJECT_CATEGORY_GANTRY = 3;
    MISC_OBJECT_CATEGORY_NONE = 4;
    MISC_OBJECT_CATEGORY_OBSTACLE = 5;
    MISC_OBJECT_CATEGORY_PARKING_SPACE = 6;
    MISC_OBJECT_CATEGORY_PATCH = 7;
    MISC_OBJECT_CATEGORY_POLE = 8;
    MISC_OBJECT_CATEGORY_RAILING = 9;
    MISC_OBJECT_CATEGORY_ROAD_MARK = 10;
    MISC_OBJECT_CATEGORY_SOUND_BARRIER = 11;
    MISC_OBJECT_CATEGORY_STREET_LAMP = 12;
    MISC_OBJECT_CATEGORY_TRAFFIC_ISLAND = 13;
    MISC_OBJECT_CATEGORY_TREE = 14;
    MISC_OBJECT_CATEGORY_VEGETATION = 15;
    MISC_OBJECT_CATEGORY_WIND_DEPRECATED = 16;
}

message StoryboardElement {
oneof implementation {
    Act act = 12;
    Action action = 13;
    Event event = 14;
    Maneuver maneuver = 15;
    ManeuverGroup maneuver_group = 16;
    Story story = 17;
}
}

// Message for ControllerVehicle, Unsupported
message ControllerVehicle {}

// Message for AccelerationCondition
message AccelerationCondition {
optional DirectionalDimension direction = 1; // 0..1
required Rule rule = 2;                       // 1..1
required double value = 3;                    // 1..1
}

// Message for Trajectory
message Trajectory {
required bool closed = 1;                   // 1..1
required string name = 2;                   // 1..1
repeated ParameterDeclaration parameter_declarations = 3;  // 0..*
required Shape shape = 4;                   // 1..1
}

// Message for ControlPoint
message ControlPoint {
optional double time = 1;             // 0..1
optional double weight = 2;           // 0..1
required Position position = 3;      // 1..1
}

// Message for Knot
message Knot {
required double value = 1;            // 1..1
}

// Message for CollisionCondition
message CollisionCondition {
required EntityRef entityRef = 1;    // 0..1
required ByObjectType byType = 2;    // 0..1
}

// Message for ByObjectType
message ByObjectType {
required ObjectType type = 1;        // 1..1
}

// Message for DistanceCondition
message DistanceCondition {
required CoordinateSystem coordinateSystem = 1;  // 0..1
required bool freespace = 2;         // 1..1
required RelativeDistanceType relativeDistanceType = 3;  // 0..1
required RoutingAlgorithm routingAlgorithm = 4;  // 0..1
required Rule rule = 5;             // 1..1
required double value = 6;          // 1..1
}

// Message for EndOfRoadCondition (Unsupported)
message EndOfRoadCondition {
required double duration = 1;       // 1..1
required EntityCondition condition = 2;  // Unsupported
}

// Message for TimeReference
message TimeReference {
required None none = 1;             // 0..1
required Timing timing = 2;         // 0..1
}

// Message for None
message None {
// No attributes (N/A)
}

// Message for Timing
message Timing {
required ReferenceContext domainAbsoluteRelative = 1;  // 1..1
required double offset = 2;         // 1..1
required double scale = 3;          // 1..1
}

// Message for TrajectoryFollowingMode
message TrajectoryFollowingMode {
required FollowingMode followingMode = 1;  // 1..1
}


// Message for LaneChangeAction
message LaneChangeAction {
required double targetLaneOffset = 1;   // 0..1
required TransitionDynamics laneChangeActionDynamics = 2;  // 1..1
required LaneChangeTarget laneChangeTarget = 3;  // 1..1
}

// Message for LaneChangeTarget
message LaneChangeTarget {
    optional RelativeTargetLane relative_target_lane = 1;  // 0..1
    optional AbsoluteTargetLane absolute_target_lane = 2;  // 0..1
}

// Message for RelativeTargetLane
message RelativeTargetLane {
    required EntityRef entity_ref = 1;  // 1..1
    required int32 value = 2;           // 1..1
}

// Message for AbsoluteTargetLane
message AbsoluteTargetLane {
    required string value = 1;  // 1..1
}

// Message for TransitionDynamics
message TransitionDynamics {
required DynamicsDimension dynamicsDimension = 1;  // 1..1
required DynamicsShape dynamicsShape = 2;  // 1..1
required FollowingMode followingMode = 3;  // 1..1
required double value = 4;          // 1..1
}

// Message for LongitudinalDisplacement (Unsupported)
message LongitudinalDisplacement {}

// Message for OffroadCondition (Unsupported)
message OffroadCondition {}

// Message for ParameterCondition
message ParameterCondition {
required ParameterDeclaration parameterRef = 1;  // 1..1
required Rule rule = 2;             // 1..1
required string value = 3;          // 1..1
}

// Message for ReachPositionCondition (Deprecated/v1.2)
message ReachPositionCondition {
// No attributes (Deprecated/v1.2)
}

// Message for RelativeDistanceCondition
message RelativeDistanceCondition {
required CoordinateSystem coordinateSystem = 1;  // 0..1
required EntityRef entityRef = 2;   // 1..1
required bool freespace = 3;       // 1..1
required RelativeDistanceType relativeDistanceType = 4;  // 1..1
required RoutingAlgorithm routingAlgorithm = 5;  // 0..1
required Rule rule = 6;             // 1..1
required double value = 7;          // 1..1
}

// Message for RelativeSpeedCondition (Unsupported)
message RelativeSpeedCondition {}

// Message for SimulationTimeCondition
message SimulationTimeCondition {
required Rule rule = 1;             // 1..1
required double value = 2;          // 1..1
}

// Message for SpeedAction
message SpeedAction {
required TransitionDynamics speedActionDynamics = 1;  // 1..1
required SpeedActionTarget speedActionTarget = 2;  // 1..1
}

// Message for SpeedActionTarget
message SpeedActionTarget {
required RelativeTargetSpeed relativeTargetSpeed = 1;  // 0..1
required AbsoluteTargetSpeed absoluteTargetSpeed = 2;  // 0..1
}

// Message for RelativeTargetSpeed
message RelativeTargetSpeed {
required bool continuous = 1;     // 1..1
required EntityRef entityRef = 2;   // 1..1
required SpeedTargetValueType speedTargetValueType = 3;  // 1..1
required double value = 4;          // 1..1
}

// Message for AbsoluteTargetSpeed
message AbsoluteTargetSpeed {
required double value = 1;   // 1..1
}

// Message for SpeedCondition
message SpeedCondition {
optional DirectionalDimension direction = 1;  // 0..1
required EntityCondition condition = 2;  // 1..1
required Rule rule = 3;      // 1..1
required double value = 4;   // 1..1
}

// Message for SpeedProfileAction (Unsupported)
message SpeedProfileAction {}

// Message for StandStillCondition
message StandStillCondition {
required double duration = 1;  // 1..1
required EntityCondition condition = 2;  // 1..1
}

// Message for StoryboardElementStateCondition
message StoryboardElementStateCondition {
required StoryboardElementState state = 1;  // 1..1
required StoryboardElement storyboardElementRef = 2;  // 1..1
required StoryboardElementType storyboardElementType = 3;  // 1..1
}

// Message for TimeHeadwayCondition
message TimeHeadwayCondition {
optional CoordinateSystem coordinateSystem = 1;  // 0..1
required EntityRef entityRef = 2;  // 1..1
required bool freespace = 3;      // 1..1
optional RelativeDistanceType relativeDistanceType = 4;  // 0..1
required RoutingAlgorithm routingAlgorithm = 5;  // 0..1
required Rule rule = 6;          // 1..1
required double value = 7;       // 1..1
}

// Message for TimeOfDayCondition (Unsupported)
message TimeOfDayCondition {}

// Message for TimeToCollisionCondition (Unsupported)
message TimeToCollisionCondition {}

// Message for TrafficSinkAction (Unsupported)
message TrafficSinkAction {}

// Message for TrafficSourceAction (Unsupported)
message TrafficSourceAction {}

// Message for TrafficStopAction (Unsupported)
message TrafficStopAction {}

// Message for TrafficSwarmAction (Unsupported)
message TrafficSwarmAction {}

// Message for TraveledDistanceCondition (Unsupported)
message TraveledDistanceCondition {}

// Message for UserDefinedValueCondition
message UserDefinedValueCondition {
required string name = 1;  // 1..1
required Rule rule = 2;    // 1..1
required string value = 3; // 1..1
}


// Message for ExternalObjectReference
message ExternalObjectReference {
required string name = 1;   // 1..1
}

// Message for Maneuver
message Maneuver {
required string name = 1;  // 1..1
repeated ParameterDeclaration parameterDeclarations = 2;  // 0..*
repeated Event events = 3;  // 1..*
}

// Message for Event
message Event {
optional uint32 maximumExecutionCount = 1;  // 0..1
required string name = 2;  // 1..1
required Priority priority = 3;  // 1..1
repeated Action actions = 4;  // 1..*
optional Trigger startTrigger = 5;  // 0..1
}

// Message for Trigger
message Trigger {
repeated ConditionGroup conditionGroups = 1;  // 0..*
}

// Message for ConditionGroup
message ConditionGroup {
repeated Condition conditions = 1;  // 1..*
}

// Message for Condition
message Condition {
required ConditionEdge conditionEdge = 1;  // 1..1
required double delay = 2;  // 1..1
required string name = 3;  // 1..1
optional ByEntityCondition byEntityCondition = 4;  // 0..1
optional ByValueCondition byValueCondition = 5;  // 0..1
}

// Message for ByEntityCondition
message ByEntityCondition {
required TriggeringEntities triggeringEntities = 1;  // 1..1
required EntityCondition entityCondition = 2;  // 1..1
}

// Message for TriggeringEntities
message TriggeringEntities {
required TriggeringEntitiesRule triggeringEntitiesRule = 1;  // 1..1
repeated EntityRef entityRefs = 2;  // 1..*
}

// Message for EntityCondition
message EntityCondition {
optional EndOfRoadCondition endOfRoadCondition = 1;  // 0..1
optional CollisionCondition collisionCondition = 2;  // 0..1
optional OffroadCondition offroadCondition = 3;  // 0..1
optional TimeHeadwayCondition timeHeadwayCondition = 4;  // 0..1
optional TimeToCollisionCondition timeToCollisionCondition = 5;  // 0..1
optional AccelerationCondition accelerationCondition = 6;  // 0..1
optional StandStillCondition standStillCondition = 7;  // 0..1
optional SpeedCondition speedCondition = 8;  // 0..1
optional RelativeSpeedCondition relativeSpeedCondition = 9;  // 0..1
optional TraveledDistanceCondition traveledDistanceCondition = 10;  // 0..1
optional DistanceCondition distanceCondition = 11;  // 0..1
optional RelativeDistanceCondition relativeDistanceCondition = 12;  // 0..1
optional RelativeClearanceCondition relativeClearanceCondition = 13;  // 0..1
}

// Message for RelativeClearanceCondition
message RelativeClearanceCondition {
optional double distanceBackward = 1;  // 0..1
optional double distanceForward = 2;  // 0..1
required bool freeSpace = 3;  // 1..1
required bool oppositeLanes = 4;  // 1..1
repeated RelativeLaneRange relativeLaneRange = 5;  // 0..*
repeated EntityRef entityRef = 6;  // 0..*
}

// Message for RelativeLaneRange
message RelativeLaneRange {
optional int32 from = 1;  // 0..1
optional int32 to = 2;  // 0..1
}

// Message for ByValueCondition
message ByValueCondition {
optional ParameterCondition parameterCondition = 1;  // 0..1
optional TimeOfDayCondition timeOfDayCondition = 2;  // 0..1
optional SimulationTimeCondition simulationTimeCondition = 3;  // 0..1
optional StoryboardElementStateCondition storyboardElementStateCondition = 4;  // 0..1
optional UserDefinedValueCondition userDefinedValueCondition = 5;  // 0..1
optional TrafficSignalCondition trafficSignalCondition = 6;  // 0..1
optional TrafficSignalControllerCondition trafficSignalControllerCondition = 7;  // 0..1
optional VariableCondition variableCondition = 8;  // 0..1
}

// Message for VariableCondition (Unsupported)
message VariableCondition {}

// Message for MiscObject
message MiscObject {
required MiscObjectCategory miscObjectCategory = 1;  // 1..1
optional string model3d = 2;  // 0..1
required string name = 3;  // 1..1
repeated ParameterDeclaration parameterDeclarations = 4;  // 0..*
required BoundingBox boundingBox = 5;  // 1..1
required Properties properties = 6;  // 1..1
}

// Message for Act
message Act {
required string name = 1;  // 1..1
repeated ManeuverGroup maneuverGroups = 2;  // 1..*
required Trigger startTrigger = 3;  // 1..1
optional Trigger stopTrigger = 4;  // 0..1
}

// Message for ManeuverGroup
message ManeuverGroup {
required uint32 maximumExecutionCount = 1;  // 1..1
required string name = 2;  // 1..1
required Actors actors = 3;  // 1..1
repeated CatalogReference catalogReferences = 4;  // 0..*
repeated Maneuver maneuvers = 5;  // 0..*
}

// Message for Actors
message Actors {
required bool selectTriggeringEntities = 1;  // 1..1
repeated EntityRef entityRefs = 2;  // 0..*
}

// Message for Story
message Story {
required string name = 1;  // 1..1
repeated ParameterDeclaration parameterDeclarations = 2;  // 0..*
repeated Act acts = 3;  // 1..*
}

message CatalogElement {
    oneof implementation {
    ControllerVehicle controller_vehicle = 4;
    Environment environment = 5;
    Maneuver maneuver = 6;
    MiscObject misc_object = 7;
    Pedestrian pedestrian = 8;
    Route route = 9;
    Trajectory trajectory = 10;
    Vehicle vehicle = 11;
    }
}

// Message for CatalogReference
message CatalogReference {
    required string catalog_name = 1;           // 1..1
    required string entry_name = 2;            // 1..1
    repeated ParameterAssignment parameter_assignments = 3;  // 0..*
    required CatalogElement ref = 4;           // 1..1
}



// Message for Action
message Action {
    required string name = 1;  // 1..1
    optional GlobalAction globalAction = 2;  // 0..1
    optional UserDefinedAction userDefinedAction = 3;  // 0..1
    optional PrivateAction privateAction = 4;  // 0..1
}

// Message for GlobalAction
message GlobalAction {
    optional EnvironmentAction environmentAction = 1;  // 0..1
    optional EntityAction entityAction = 2;  // 0..1
    optional InfrastructureAction infrastructureAction = 3;  // 0..1
    optional TrafficAction trafficAction = 4;  // 0..1
    optional VariableAction variableAction = 5;  // 0..1
}

// Message for EntityAction
message EntityAction {
    required EntityRef entityRef = 1;  // 1..1
    optional AddEntityAction addEntityAction = 2;  // 0..1
    optional DeleteEntityAction deleteEntityAction = 3;  // 0..1
}

// Message for TrafficAction (Unsupported)
message TrafficAction {}

// Message for VariableAction (Unsupported)
message VariableAction {}

// Message for UserDefinedAction
message UserDefinedAction {
    required CustomCommandAction customCommandAction = 1;  // 1..1
}

// Message for PrivateAction
message PrivateAction {
    optional LongitudinalAction longitudinalAction = 1;  // 0..1
    optional LateralAction lateralAction = 2;  // 0..1
    optional VisibilityAction visibilityAction = 3;  // 0..1
    optional SynchronizeAction synchronizeAction = 4;  // 0..1
    optional ControllerAction controllerAction = 5;  // 0..1
    optional TeleportAction teleportAction = 6;  // 0..1
    optional RoutingAction routingAction = 7;  // 0..1
    optional AppearanceAction appearanceAction = 8;  // 0..1
}

// Message for LongitudinalAction
message LongitudinalAction {
    optional SpeedAction speedAction = 1;  // 0..1
    optional LongitudinalDistanceAction longitudinalDistanceAction = 2;  // 0..1
    optional SpeedProfileAction speedProfileAction = 3;  // 0..1
}

// Message for LateralAction
message LateralAction {
    optional LaneChangeAction laneChangeAction = 1;  // 0..1
    optional LaneOffsetAction laneOffsetAction = 2;  // 0..1
    optional LateralDistanceAction lateralDistanceAction = 3;  // 0..1
}

// Message for AppearanceAction (Unsupported)
message AppearanceAction {}

// Message for VisibilityAction (Unsupported)
message VisibilityAction {}

// Message for ControllerAction
message ControllerAction {
    optional AssignControllerAction assignControllerAction = 1;  // 0..1
    optional OverrideControllerValueAction overrideControllerValueAction = 2;  // 0..1
    optional ActivateControllerAction activateControllerAction = 3;  // 0..1
}

// Message for RoutingAction
message RoutingAction {
    optional AssignRouteAction assignRouteAction = 1;  // 0..1
    optional FollowTrajectoryAction followTrajectoryAction = 2;  // 0..1
    optional AcquirePositionAction acquirePositionAction = 3;  // 0..1
}

// Message for OverrideControllerValueAction (Unsupported)
message OverrideControllerValueAction {}

// Message for AcquirePositionAction
message AcquirePositionAction {
    required Position position = 1;      // 1..1
    required RoutingAction routing_action = 2;  // 1..1
}

// Message for ActivateControllerAction (Unsupported/Deprecated)
message ActivateControllerAction {}

// Message for AddEntityAction
message AddEntityAction {
    required Position position = 1;      // 1..1
    required EntityAction entity_action = 2;  // 1..1
}

// Message for AnimationAction (Unsupported)
message AnimationAction {}

// Message for AssignControllerAction
message AssignControllerAction {
    required bool activateLateral = 1;         // 0..1
    required bool activateLighting = 2;        // 0..1
    required bool activateLongitudinal = 3;   // 0..1
    required Controller controller = 4;           // 0..1
    required CatalogReference catalogReference = 5;  // 0..1
    required ControllerAction controller_action = 6;  // 1..1
}


// Message for AssignRouteAction
message AssignRouteAction {
    required Route route = 1;             // 0..1
    required CatalogReference catalogReference = 2;  // 0..1
    required AssignRouteAction action = 3;  // 1..1
}


// Message for CustomCommandAction
message CustomCommandAction {
    required string type = 1;            // 1..1
    required string content = 2;         // 1..1
    required UserDefinedAction action = 3;  // 1..1
}

// Message for DeleteEntityAction
message DeleteEntityAction {}

// Message for EnvironmentAction (Unsupported)
message EnvironmentAction {}

// Message for FollowTrajectoryAction (doc out-of-date)
message FollowTrajectoryAction {
required double initialDistanceOffset = 1;   // Unsupported
required RoutingAction action = 2;  // Unsupported
// Additional fields are unsupported and documentation is out-of-date
}

// Message for LaneOffsetAction (Unsupported)
message LaneOffsetAction {
    required bool continuous = 1;     // Unsupported
    required LaneOffsetActionDynamics laneOffsetActionDynamics = 2;  // Unsupported
    required LaneOffsetTarget laneOffsetTarget = 3;  // Unsupported
}

// Message for LaneOffsetActionDynamics (Unsupported)
message LaneOffsetActionDynamics {}

// Message for LaneOffsetTarget (Unsupported)
message LaneOffsetTarget {}

// Message for LateralDistanceAction (Unsupported)
message LateralDistanceAction {}

// Message for LightStateAction (Unsupported)
message LightStateAction {}

// Message for LongitudinalDistanceAction (Unsupported)
message LongitudinalDistanceAction {
    required bool continuous = 1;     // Unsupported
    required CoordinateSystem coordinateSystem = 2;  // Unsupported
    required LongitudinalDisplacement displacement = 3;  // Unsupported
    required double distance = 4;      // Unsupported
    required EntityRef entityRef = 5;   // Unsupported
    required bool freespace = 6;       // Unsupported
    required double timeGap = 7;        // Unsupported
    required VisibilityAction visibilityAction = 8;  // Unsupported
    required SynchronizeAction synchronizeAction = 9;  // Unsupported
    required ActivateControllerAction activateControllerAction = 10;  // Unsupported
}

// Message for SynchronizeAction (Unsupported)
message SynchronizeAction {}

// Message for TeleportAction
message TeleportAction {
required Position position = 1;  // 1..1
required PrivateAction action = 2;  // 1..1
}

// Enum for ControllerType
enum ControllerType {
    CONTROLLERTYPE_LATERAL = 0;
    CONTROLLERTYPE_LONGITUDINAL = 1;
    CONTROLLERTYPE_LIGHTING = 2;
    CONTROLLERTYPE_ANIMATION = 3;
    CONTROLLERTYPE_MOVEMENT = 4;
    CONTROLLERTYPE_APPEARANCE = 5;
    CONTROLLERTYPE_ALL = 6;
}

// Message for Controller
message Controller {
    required ControllerType controllerType = 1;  // 0..1
    required string name = 2;                   // 1..1
    repeated ParameterDeclaration parameterDeclarations = 3;  // 0..*
    required Properties properties = 4;         // 1..1
}

// Message for ObjectController
message ObjectController {
    optional CatalogReference catalogReference = 1;  // 0..1
    optional Controller controller = 2;    // 0..1
}

// Enum for PedestrianCategory
enum PedestrianCategory {
    PEDESTRIANCATEGORY_ANIMAL = 0;
    PEDESTRIANCATEGORY_PEDESTRIAN = 1;
    PEDESTRIANCATEGORY_WHEELCHAIR = 2;
}

// Enum for VehicleCategory
enum VehicleCategory {
    VEHICLECATEGORY_BICYCLE = 0;
    VEHICLECATEGORY_BUS = 1;
    VEHICLECATEGORY_CAR = 2;
    VEHICLECATEGORY_MOTORBIKE = 3;
    VEHICLECATEGORY_SEMITRAILER = 4;
    VEHICLECATEGORY_TRAILER = 5;
    VEHICLECATEGORY_TRAIN = 6;
    VEHICLECATEGORY_TRAM = 7;
    VEHICLECATEGORY_TRUCK = 8;
    VEHICLECATEGORY_VAN = 9;
}

// Enum for Role
enum Role {
    ROLE_NONE = 0;
    ROLE_AMBULANCE = 1;
    ROLE_CIVIL = 2;
    ROLE_FIRE = 3;
    ROLE_MILITARY = 4;
    ROLE_POLICE = 5;
    ROLE_PUBLIC_TRANSPORT = 6;
    ROLE_ROAD_ASSISTANCE = 7;
}

message Entity {
    oneof implementation {
    EntitySelection entity_selection = 1;
    ScenarioObject scenario_object = 2;
    SpawnedObject spawned_object = 3;
    }
}


// Message for EntityRef
message EntityRef {
    required Entity entityRef = 1;	// 1..1
}

// Message for SpawnedObject, Unsupported
message SpawnedObject {}

// Message for EntitySelection
message EntitySelection {
    required string name = 1;              // 1..1
    required SelectedEntities members = 2;  // 1..1
}

// Message for ScenarioObject
message ScenarioObject {
    required string name = 1;              // 1..1
    required EntityObject entityObject = 2;  // 1..1
    repeated ObjectController objectController = 3;  // 0..*
}

// Message for SelectedEntities
message SelectedEntities {
    repeated EntityRef entityRef = 1;  // 0..*
    repeated ByType byType = 2;        // 0..*
}

// Message for ByType
message ByType {
    required ObjectType objectType = 1;  // 1..1
}

// Message for EntityObject
message EntityObject {
    optional CatalogReference catalogReference = 1;  // 0..1
    optional Vehicle vehicle = 2;      // 0..1
    optional Pedestrian pedestrian = 3;  // 0..1
    optional MiscObject miscObject = 4;  // 0..1
    optional ExternalObjectReference externalObjectReference = 5;  // 0..1
}

// Message for Pedestrian
message Pedestrian {
    required double mass = 1;   // 1..1
    optional string model3d = 2;  // 0..1
    required string name = 3;    // 1..1
    required PedestrianCategory pedestrianCategory = 4;  // 1..1
    optional Role role = 5;      // 0..1
    repeated ParameterDeclaration parameterDeclarations = 6;  // 0..*
    required BoundingBox boundingBox = 7;  // 1..1
    required Properties properties = 8;  // 1..1
}

// Message for Vehicle
message Vehicle {
    optional double mass = 1;   // 0..1
    optional string model3d = 2;  // 0..1
    required string name = 3;    // 1..1
    optional Role role = 4;      // 0..1
    required VehicleCategory vehicleCategory = 5;  // 1..1
    repeated ParameterDeclaration parameterDeclarations = 6;  // 0..*
    required BoundingBox boundingBox = 7;  // 1..1
    required Performance performance = 8;  // 1..1
    required Axles axles = 9;   // 1..1
    required Properties properties = 10;  // 1..1
}

// Message for Performance
message Performance {
    required double maxAcceleration = 1;   // 1..1
    optional double maxAccelerationRate = 2;  // 0..1
    required double maxDeceleration = 3;   // 1..1
    optional double maxDecelerationRate = 4;  // 0..1
    required double maxSpeed = 5;   // 1..1
}
// Enum for FractionalCloudCover
enum FractionalCloudCover {
    FRACTIONALCLOUDCOVER_ZERO_OKTAS = 0;
    FRACTIONALCLOUDCOVER_ONE_OKTAS = 1;
    FRACTIONALCLOUDCOVER_TWO_OKTAS = 2;
    FRACTIONALCLOUDCOVER_THREE_OKTAS = 3;
    FRACTIONALCLOUDCOVER_FOUR_OKTAS = 4;
    FRACTIONALCLOUDCOVER_FIVE_OKTAS = 5;
    FRACTIONALCLOUDCOVER_SIX_OKTAS = 6;
    FRACTIONALCLOUDCOVER_SEVEN_OKTAS = 7;
    FRACTIONALCLOUDCOVER_EIGHT_OKTAS = 8;
    FRACTIONALCLOUDCOVER_NINE_OKTAS = 9;
}

// Enum for PrecipitationType
enum PrecipitationType {
    PRECIPITATIONTYPE_DRY = 0;
    PRECIPITATIONTYPE_RAIN = 1;
    PRECIPITATIONTYPE_SNOW = 2;
}

// Enum for Wetness
enum Wetness {
    WETNESS_DRY = 0;
    WETNESS_MOIST = 1;
    WETNESS_WET_WITH_PUDDLES = 2;
    WETNESS_LOW_FLOODED = 3;
    WETNESS_HIGH_FLOODED = 4;
}

// Message for Environment
message Environment {
    required string name = 1;   // 1..1
    repeated ParameterDeclaration parameterDeclarations = 2;  // 0..*
    optional TimeOfDay timeOfDay = 3;  // 0..1
    optional Weather weather = 4;     // 0..1
    optional RoadCondition roadCondition = 5;  // 0..1
}

// Message for TimeOfDay
message TimeOfDay {
    required bool animation = 1;  // 1..1
    required double dateTime = 2;  // 1..1, Note that this property changed implicitly to double. Type of dateTime should be corrseponding data type of DateTime in OpenScenario.
}

// Message for Weather
message Weather {
    optional double atmosphericPressure = 1;  // 0..1
    optional FractionalCloudCover fractionalCloudCover = 2;  // 0..1
    optional double temperature = 3;  // 0..1
    optional Sun sun = 4;  // 0..1
    optional Fog fog = 5;  // 0..1
    optional Precipitation precipitation = 6;  // 0..1
    optional Wind wind = 7;  // 0..1
    optional DomeImage domeImage = 8;  // 0..1
}

// Message for Sun
message Sun {
    required double azimuth = 1;  // 1..1
    required double elevation = 2;  // 1..1
    optional double illuminance = 3;  // 0..1
}

// Message for Fog
message Fog {
    required double visualRange = 1;  // 1..1
    optional BoundingBox boundingBox = 2;  // 0..1
}

// Message for Precipitation
message Precipitation {
    optional double precipitationIntensity = 1;  // 0..1
    required PrecipitationType precipitationType = 2;  // 1..1
}

// Message for Wind
message Wind {
    required double direction = 1;  // 1..1
    required double speed = 2;  // 1..1
}

// Message for DomeImage
message DomeImage {
    optional double azimuthOffset = 1;  // 0..1
    required File domeFile = 2;  // 1..1
}

// Message for RoadCondition
message RoadCondition {
    required double frictionScaleFactor = 1;  // 1..1
    optional Wetness wetness = 2;  // 0..1
    optional Properties properties = 3;  // 0..1
}

// Enum for Rule
enum Rule {
    RULE_EQUAL_TO = 0;
    RULE_GREATER_THAN = 1;
    RULE_LESS_THAN = 2;
    RULE_GREATER_OR_EQUAL = 3;
    RULE_LESS_OR_EQUAL = 4;
    RULE_NOT_EQUAL_TO = 5;
}

// Message for CustomContent
message CustomContent {
    required string content = 1;         // 1..1
}

// Message for File
message File {
    required string filepath = 1;        // 1..1
}

// Message for Properties
message Properties {
    repeated Property files = 1;          // 0..*
    repeated CustomContent customContent = 2;  // 0..*
}

// Message for Property
message Property {
    required string name = 1;            // 1..1
    required string value = 2;           // 1..1
}

// Message for ValueConstraintGroup
message ValueConstraintGroup {
    repeated ValueConstraint constraints = 1;  // 1..*
    }
    
    // Message for ValueConstraint
    message ValueConstraint {
    required Rule rule = 1;                   // 1..1
    required string value = 2;                // 1..1
    }

// Message for Axles
message Axles {
    required Axle frontAxle = 1;   // 1..1
    required Axle rearAxle = 2;    // 1..1
    repeated Axle additionalAxles = 3;  // 0..*
}

// Message for Axle
message Axle {
    required double maxSteering = 1;   // 1..1
    required double positionX = 2;     // 1..1
    required double positionZ = 3;     // 1..1
    required double trackWidth = 4;    // 1..1
    required double wheelDiameter = 5;  // 1..1
}

// Message for BoundingBox
message BoundingBox {
    required Center center = 1;    // 1..1
    required Dimensions dimensions = 2;  // 1..1
}

// Message for Center
message Center {
    required double x = 1;   // 1..1
    required double y = 2;   // 1..1
    required double z = 3;   // 1..1
}

// Message for Dimensions
message Dimensions {
    required double height = 1;   // 1..1
    required double length = 2;   // 1..1
    required double width = 3;    // 1..1
}


// Message for Shape
message Shape {
    optional Polyline polyline = 1;  // 0..1 (Unsupported)
    optional Clothoid clothoid = 2;  // 0..1 (Unsupported)
    optional Nurbs nurbs = 3;        // 0..1
}

// Message for Polyline
message Polyline {
    repeated Vertex vertices = 1;  // 2..*
}

// Message for Vertex
message Vertex {
    optional double time = 1;     // 0..1
    required Position position = 2;  // 1..1
}

// Message for Clothoid (Unsupported)
message Clothoid {}

// Message for Nurbs  (Unsupported)
message Nurbs {}
// Enum for ParameterType
enum ParameterType {
    PARAMETERTYPE_BOOLEAN = 0;
    PARAMETERTYPE_DATETIME = 1;
    PARAMETERTYPE_DOUBLE = 2;
    PARAMETERTYPE_INTEGER = 3;
    PARAMETERTYPE_STRING = 4;
    PARAMETERTYPE_UNSIGNED_INT = 5;
    PARAMETERTYPE_UNSIGNED_SHORT = 6;
    PARAMETERTYPE_INT = 7;
}

// Message for ParameterDeclaration
message ParameterDeclaration {
    required string name = 1;                  // 1..1
    required ParameterType parameter_type = 2; // 1..1
    required string value = 3;                 // 1..1
    repeated ValueConstraintGroup constraint_groups = 4;  // 0..*
}

// Message for ParameterAssignment
message ParameterAssignment {
    required ParameterDeclaration parameter_ref = 1;  // 1..1
    required string value = 2;                         // 1..1
}

// Message for ParameterModifyAction (Deprecated/v1.2)
message ParameterModifyAction {}

// Message for ParameterSetAction (Deprecated/v1.2)
message ParameterSetAction {}
// Message for Position
message Position {
    optional WorldPosition world_position = 1;                    // 0..1
    optional RelativeWorldPosition relative_world_position = 2;    // Unsupported
    optional RelativeObjectPosition relative_object_position = 3;  // 0..1
    optional RoadPosition road_position = 4;                      // Unsupported
    optional RelativeRoadPosition relative_road_position = 5;     // Unsupported
    optional LanePosition lane_position = 6;                      // 0..1
    optional RelativeLanePosition relative_lane_position = 7;     // Unsupported
    optional RoutePosition route_position = 8;                    // Unsupported
    optional GeoPosition geo_position = 9;                        // Not Listed
    optional TrajectoryPosition trajectory_position = 10;         // Not Listed
}

// Message for WorldPosition
message WorldPosition {
    optional double h = 1;  // 0..1
    optional double p = 2;  // 0..1
    optional double r = 3;  // 0..1
    required double x = 4;  // 1..1
    required double y = 5;  // 1..1
    optional double z = 6;  // 0..1
}

// Message for RelativeWorldPosition
message RelativeWorldPosition {
    required double dx = 1;          // 1..1
    required double dy = 2;          // 1..1
    optional double dz = 3;          // 0..1
    required Entity entity_ref = 4;  // 1..1
    optional Orientation orientation = 5;  // 0..1
}

// Message for RoadPosition, Unsupported
message RoadPosition {}

// Message for RelativeRoadPosition, Unsupported
message RelativeRoadPosition {}

// Message for Orientation
message Orientation {
    optional double h = 1;                  // 0..1
    optional double p = 2;                  // 0..1
    optional double r = 3;                  // 0..1
    optional ReferenceContext type = 4;     // 0..1
}

// Message for RelativeObjectPosition
message RelativeObjectPosition {
    required double dx = 1;          // 1..1
    required double dy = 2;          // 1..1
    optional double dz = 3;          // 0..1
    required Entity entity_ref = 4;  // 1..1
    optional Orientation orientation = 5;  // 0..1
}

// Message for LanePosition
message LanePosition {
    required string lane_id = 1;        // 1..1
    optional double offset = 2;         // 0..1
    required string road_id = 3;        // 1..1
    required double s = 4;              // 1..1
    optional Orientation orientation = 5;  // 0..1
}

// Message for RelativeLanePosition
message RelativeLanePosition {
    required int32 d_lane = 1;         // Unsupported
    optional double ds = 2;            // Unsupported
    optional double ds_lane = 3;       // Unsupported
    required Entity entity_ref = 4;    // Unsupported
    optional double offset = 5;        // Unsupported
    optional Orientation orientation = 6;  // Unsupported
}

// Message for RoutePosition
message RoutePosition {
    required RouteRef route_ref = 1;         // Unsupported
    optional Orientation orientation = 2;    // Unsupported
    optional InRoutePosition in_route_position = 3;  // Unsupported
}

// Message for InRoutePosition
message InRoutePosition {
    optional PositionOfCurrentEntity from_current_entity = 1;       // 0..1
    optional PositionInRoadCoordinates from_road_coordinates = 2;  // 0..1
    optional PositionInLaneCoordinates from_lane_coordinates = 3;  // 0..1
}

// Message for PositionOfCurrentEntity
message PositionOfCurrentEntity {
    required Entity entity_ref = 1;  // 1..1
}

// Message for PositionInRoadCoordinates
message PositionInRoadCoordinates {
    required double path_s = 1;  // 1..1
    required double t = 2;       // 1..1
}

// Message for PositionInLaneCoordinates
message PositionInLaneCoordinates {
    required string lane_id = 1;     // 1..1
    required double lane_offset = 2;  // 0..1
    required double path_s = 3;       // 1..1
}

// Message for GeoPosition
message GeoPosition {
    optional double altitude = 1;  // Unsupported
    optional double latitude_deg = 2;  // Unsupported
    optional double longitude_deg = 3;  // Unsupported
    optional Orientation orientation = 4;  // Unsupported
}

// Message for TrajectoryPosition
message TrajectoryPosition {
    required double s = 1;               // Unsupported
    required double t = 2;               // Unsupported
    optional Orientation orientation = 3;  // Unsupported
    optional TrajectoryRef trajectory_ref = 4;  // Unsupported
}

// Message for TrajectoryRef
message TrajectoryRef {
    required Trajectory trajectory = 1;  // 1..1
    required CatalogReference catalogReference = 2;  // 1..1
}

// Enum for RouteStrategy
enum RouteStrategy {
    ROUTESTRATEGY_FASTEST = 0;
    ROUTESTRATEGY_LEAST_INTERSECTIONS = 1;
    ROUTESTRATEGY_RANDOM = 2;
    ROUTESTRATEGY_SHORTEST = 3;
}

// Message for RouteRef
message RouteRef {
    optional Route route = 1;                // 0..1
    optional CatalogReference catalog_reference = 2;  // 0..1
}

// Message for Route
message Route {
    required bool closed = 1;                  // 1..1
    required string name = 2;                  // 1..1
    repeated ParameterDeclaration parameter_declarations = 3;  // 0..*
    repeated Waypoint waypoints = 4;           // 2..*
}

// Message for Waypoint
message Waypoint {
    required RouteStrategy route_strategy = 1;  // 1..1
    required Position position = 2;             // 1..1
}

// Message for InfrastructureAction
message InfrastructureAction {
    required TrafficSignalAction trafficSignalAction = 1;  // 1..1
}

// Message for TrafficSignalCondition
message TrafficSignalCondition {
    required string name = 1;    // 1..1
    required string state = 2;   // 1..1
}

// Message for TrafficSignalAction
message TrafficSignalAction {
    optional TrafficSignalControllerAction trafficSignalControllerAction = 1;  // 0..1
    optional TrafficSignalStateAction trafficSignalStateAction = 2;  // 0..1
}

// Message for TrafficSignalControllerAction
message TrafficSignalControllerAction {
    required string phase = 1;  // TrafficSignalControllerAction
    required TrafficSignalController trafficSignalControllerRef = 2;  // TrafficSignalControllerAction
    required Phase phaseRef = 3;  // TrafficSignalControllerAction
}

// Message for TrafficSignalController
message TrafficSignalController {
    optional double delay = 1;   // 0..1
    required string name = 2;    // 1..1
    optional string reference = 3;  // 0..1
    repeated Phase phases = 4;   // 0..*
}

// Message for Phase
message Phase {
    required double duration = 1;   // 1..1
    required string name = 2;       // 1..1
    repeated TrafficSignalState trafficSignalStates = 3;  // 0..*
    optional TrafficSignalGroupState trafficeSignalGroupState = 4;  // 0..1
}

// Message for TrafficSignalState
message TrafficSignalState {
    required string state = 1;   // 1..1
    required string trafficSignalId = 2;  // 1..1
}

// Message for TrafficSignalGroupState
message TrafficSignalGroupState {
    required string state = 1;   // 1..1
}

// Message for TrafficSignalControllerCondition
message TrafficSignalControllerCondition {
    required string phase = 1;  // 1..1
    required TrafficSignalController trafficSignalControllerRef = 2;  // 1..1
    repeated Phase phaseRef = 3;  // 0..*
}

// Message for TrafficSignalStateAction
message TrafficSignalStateAction {
    required string name = 1;   // 1..1
    required string state = 2;  // 1..1
}